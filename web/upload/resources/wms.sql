CONNECT system/Orcl123456 @orcl

--创建用户
DROP USER zww CASCADE;
CREATE USER zww IDENTIFIED BY Orcl123456 ;

--授权
GRANT "CONNECT" TO zww ;
GRANT "RESOURCE" TO zww ;
GRANT "DBA" TO zww ;

--连接用户
CONNECT zww/Orcl123456 @orcl

--创建表
DROP TABLE  T_ADMIN;
CREATE TABLE T_ADMIN
(
  ID NUMBER(10) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  PASSWORD VARCHAR2(20) NOT NULL, 
  CONSTRAINT T_ADMIN_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_REPERTORY;
CREATE TABLE T_REPERTORY
(
  ID NUMBER(10, 0) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  ADDRESS VARCHAR2(20),
  CONSTRAINT T_REPERTORY_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_TYPE;
CREATE TABLE T_TYPE
(
  ID NUMBER(10, 0) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  RID NUMBER(10, 0) NOT NULL,
  CONSTRAINT T_TYPE_PK PRIMARY KEY
  (
    ID
  ),
  CONSTRAINT T_TYPE_T_REPERTORY_FK1 FOREIGN KEY
  (
    RID
  ) REFERENCES T_REPERTORY
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_SUPPLIER;
CREATE TABLE T_SUPPLIER
(
  ID NUMBER(10, 0) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  ADDRESS VARCHAR2(20),
  PHONE VARCHAR2(20),
  CONSTRAINT T_SUPPLIER_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_GOODS;
CREATE TABLE T_GOODS
(
  ID NUMBER(10, 0) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  TID NUMBER(10, 0) NOT NULL,
  AMOUNT NUMBER(10, 0) NOT NULL,
  CONSTRAINT T_GOODS_PK PRIMARY KEY
  (
    ID
  ),
  CONSTRAINT T_GOODS_T_TYPE_FK1 FOREIGN KEY
  (
    TID
  ) REFERENCES T_TYPE
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_CUSTOMER;
CREATE TABLE T_CUSTOMER
(
  ID NUMBER(10, 0) NOT NULL,
  NAME VARCHAR2(20) NOT NULL,
  ADDRESS VARCHAR2(20),
  PHONE VARCHAR2(20),
  CONSTRAINT T_CUSTOMER_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_INBOUND;
CREATE TABLE T_INBOUND
(
  ID NUMBER(10, 0) NOT NULL,
  SID NUMBER(10, 0) NOT NULL,
  GID NUMBER(10, 0) NOT NULL,
  AID NUMBER(10, 0) NOT NULL,
  AMOUNT NUMBER(10, 0) NOT NULL,
  TIME DATE NOT NULL,
  PRICE NUMBER(10, 2) NOT NULL,
  CONSTRAINT T_INBOUND_PK PRIMARY KEY
  (
    ID
  ),
  CONSTRAINT T_INBOUND_T_SUPPLIER_FK1 FOREIGN KEY
  (
    SID
  ) REFERENCES T_SUPPLIER
  (
  ID
  ),
  CONSTRAINT T_INBOUND_T_GOODS_FK1 FOREIGN KEY
  (
    GID
  )REFERENCES T_GOODS
  (
    ID
  ),
  CONSTRAINT T_INBOUND_T_ADMIN_FK1 FOREIGN KEY
  (
    AID
  ) REFERENCES T_ADMIN
  (
  ID
  )
  ENABLE
);


DROP TABLE  T_OUTBOUND;
CREATE TABLE T_OUTBOUND
(
  ID NUMBER(10, 0) NOT NULL,
  GID NUMBER(10, 0) NOT NULL,
  CID NUMBER(10, 0) NOT NULL,
  AID NUMBER(10, 0) NOT NULL,
  AMOUNT NUMBER(10, 0) NOT NULL,
  TIME DATE NOT NULL,
  PRICE NUMBER(10, 2) NOT NULL,
  CONSTRAINT T_OUTBOUND_PK PRIMARY KEY
  (
    ID
  ),
  CONSTRAINT T_OUTBOUND_T_GOODS_FK1 FOREIGN KEY
  (
    GID
  )REFERENCES T_GOODS
  (
    ID
  ),
  CONSTRAINT T_OUTBOUND_T_CUSTOMER_FK1 FOREIGN KEY
  (
    CID
  ) REFERENCES T_CUSTOMER
  (
    ID
  ),
  CONSTRAINT T_OUTBOUND_T_ADMIN_FK1 FOREIGN KEY
  (
    AID
  )REFERENCES T_ADMIN
  (
    ID
  )
  ENABLE
);

DROP TABLE  T_MONEY;
CREATE TABLE T_MONEY
(
  ID NUMBER(10, 0) NOT NULL,
  PROFIT NUMBER(10, 2) NOT NULL,
  TOTAL NUMBER(10, 2) NOT NULL,
  TIME DATE NOT NULL,
  CONSTRAINT T_MONEY_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
);

--创建序列
CREATE SEQUENCE SEQ_T_ADMIN INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_REPERTORY INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_TYPE INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_GOODS INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_SUPPLIER INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_CUSTOMER INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_INBOUND INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_OUTBOUND INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;
CREATE SEQUENCE SEQ_T_MONEY INCREMENT BY 1 START WITH 1000 MAXVALUE 1000000 MINVALUE 1 NOCACHE ORDER;

--插入数据

--(T_ADMIN)
INSERT INTO "T_ADMIN" (ID, NAME, PASSWORD) VALUES (SEQ_T_ADMIN.NEXTVAL, 'admin', 'admin');
INSERT INTO "T_ADMIN" (ID, NAME, PASSWORD) VALUES (SEQ_T_ADMIN.NEXTVAL, 'ethan', '123456');

--(T_REPERTORY)
INSERT INTO "T_REPERTORY" (ID, NAME, ADDRESS) VALUES (SEQ_T_REPERTORY.NEXTVAL, '仓库A', '五邑大学A仓库');
INSERT INTO "T_REPERTORY" (ID, NAME, ADDRESS) VALUES (SEQ_T_REPERTORY.NEXTVAL, '仓库B', '五邑大学B仓库');
INSERT INTO "T_REPERTORY" (ID, NAME, ADDRESS) VALUES (SEQ_T_REPERTORY.NEXTVAL, '仓库C', '五邑大学C仓库');
INSERT INTO "T_REPERTORY" (ID, NAME, ADDRESS) VALUES (SEQ_T_REPERTORY.NEXTVAL, '仓库D', '五邑大学D仓库');
INSERT INTO "T_REPERTORY" (ID, NAME, ADDRESS) VALUES (SEQ_T_REPERTORY.NEXTVAL, '仓库E', '五邑大学E仓库');

--(T_TYPE)
INSERT INTO "T_TYPE" (ID, NAME, RID) VALUES (SEQ_T_TYPE.NEXTVAL, '类型A', '1001');
INSERT INTO "T_TYPE" (ID, NAME, RID) VALUES (SEQ_T_TYPE.NEXTVAL, '类型B', '1002');
INSERT INTO "T_TYPE" (ID, NAME, RID) VALUES (SEQ_T_TYPE.NEXTVAL, '类型C', '1003');
INSERT INTO "T_TYPE" (ID, NAME, RID) VALUES (SEQ_T_TYPE.NEXTVAL, '类型D', '1004');
INSERT INTO "T_TYPE" (ID, NAME, RID) VALUES (SEQ_T_TYPE.NEXTVAL, '类型E', '1005');

--(T_GOODS)
INSERT INTO "T_GOODS" (ID, NAME, TID, AMOUNT) VALUES (SEQ_T_GOODS.NEXTVAL, '货物A', '1001', '150');
INSERT INTO "T_GOODS" (ID, NAME, TID, AMOUNT) VALUES (SEQ_T_GOODS.NEXTVAL, '货物B', '1002', '100');
INSERT INTO "T_GOODS" (ID, NAME, TID, AMOUNT) VALUES (SEQ_T_GOODS.NEXTVAL, '货物C', '1003', '200');
INSERT INTO "T_GOODS" (ID, NAME, TID, AMOUNT) VALUES (SEQ_T_GOODS.NEXTVAL, '货物D', '1004', '170');
INSERT INTO "T_GOODS" (ID, NAME, TID, AMOUNT) VALUES (SEQ_T_GOODS.NEXTVAL, '货物E', '1005', '160');

--(T_SUPPLIER);
INSERT INTO "T_SUPPLIER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_SUPPLIER.NEXTVAL, '供应商A', '五邑大学A供应商', '3299708');
INSERT INTO "T_SUPPLIER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_SUPPLIER.NEXTVAL, '供应商B', '五邑大学B供应商', '3299709');
INSERT INTO "T_SUPPLIER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_SUPPLIER.NEXTVAL, '供应商C', '五邑大学C供应商', '3299710');
INSERT INTO "T_SUPPLIER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_SUPPLIER.NEXTVAL, '供应商D', '五邑大学D供应商', '3299711');
INSERT INTO "T_SUPPLIER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_SUPPLIER.NEXTVAL, '供应商E', '五邑大学E供应商', '3299712');

--(T_CUSTOMER)
INSERT INTO "T_CUSTOMER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_CUSTOMER.NEXTVAL, '客户A', '五邑大学A客户', '3288708');
INSERT INTO "T_CUSTOMER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_CUSTOMER.NEXTVAL, '客户B', '五邑大学B客户', '3288709');
INSERT INTO "T_CUSTOMER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_CUSTOMER.NEXTVAL, '客户C', '五邑大学C客户', '3288710');
INSERT INTO "T_CUSTOMER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_CUSTOMER.NEXTVAL, '客户D', '五邑大学D客户', '3288711');
INSERT INTO "T_CUSTOMER" (ID, NAME, ADDRESS, PHONE) VALUES (SEQ_T_CUSTOMER.NEXTVAL, '客户E', '五邑大学E客户', '3288712');

--(T_MONEY)
INSERT INTO "T_MONEY" (ID, PROFIT, TOTAL, TIME) VALUES (SEQ_T_MONEY.NEXTVAL, '0.00', '100000.00', TO_DATE('19-12月-18', 'DD-MON-RR'));

--(T_INBOUND)
INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, '1001', '1001', '1001', '50', TO_DATE('19-12月-18', 'DD-MON-RR'), '23.3');
INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, '1002', '1002', '1002', '46', TO_DATE('19-12月-18', 'DD-MON-RR'), '31');
INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, '1003', '1003', '1001', '52', TO_DATE('19-12月-18', 'DD-MON-RR'), '24.22');
INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, '1004', '1004', '1002', '100', TO_DATE('19-12月-18', 'DD-MON-RR'), '21.1');
INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, '1005', '1005', '1001', '44', TO_DATE('19-12月-18', 'DD-MON-RR'), '24');


--(T_OUTBOUND)
INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, '1001', '1001', '1001', '13', TO_DATE('19-12月-18', 'DD-MON-RR'), '60');
INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, '1002', '1002', '1002', '21', TO_DATE('19-12月-18', 'DD-MON-RR'), '54');
INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, '1003', '1003', '1001', '31', TO_DATE('19-12月-18', 'DD-MON-RR'), '73');
INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, '1004', '1004', '1002', '25', TO_DATE('19-12月-18', 'DD-MON-RR'), '57');
INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, '1005', '1005', '1001', '24', TO_DATE('19-12月-18', 'DD-MON-RR'), '68');


--创建函数
--计算收益
CREATE OR REPLACE FUNCTION INCOME
( amount IN NUMBER DEFAULT 0,
  price IN NUMBER DEFAULT 0
) RETURN NUMBER AS
  RESULT NUMBER; 
BEGIN
  RESULT := (amount * price);
  RETURN RESULT;
END;
/

--计算余额
CREATE OR REPLACE FUNCTION GETTOTAL
( income IN NUMBER DEFAULT 0,
  total IN NUMBER DEFAULT 0
) RETURN NUMBER AS
  RESULT NUMBER; 
BEGIN
  RESULT := (total + income);
  RETURN RESULT;
END;
/
 

--创建视图

--1.所有货物信息
CREATE OR REPLACE VIEW GOODSVIEW AS SELECT 
    T_GOODS.ID ID, 
    T_GOODS.NAME NAME, 
    T_GOODS.AMOUNT AMOUNT, 
    T_TYPE.NAME NAME1, 
    T_REPERTORY.NAME NAME2,
    T_REPERTORY.ADDRESS ADDRESS 
FROM 
    T_GOODS, 
    T_TYPE, 
    T_REPERTORY 
WHERE 
    T_GOODS.TID = T_TYPE.ID AND T_TYPE.RID = T_REPERTORY.ID;

--2.所有入库信息
CREATE OR REPLACE VIEW INBOUNDVIEW AS SELECT 
    T_INBOUND.ID ID, 
    T_GOODS.NAME NAME, 
    T_INBOUND.AMOUNT AMOUNT, 
    T_INBOUND.PRICE PRICE, 
    T_SUPPLIER.NAME NAME4, 
    T_SUPPLIER.PHONE PHONE, 
    T_SUPPLIER.ADDRESS ADDRESS1, 
    T_ADMIN.NAME NAME3, 
    T_INBOUND.TIME TIME 
FROM 
    T_INBOUND, 
    T_GOODS, 
    T_ADMIN, 
    T_SUPPLIER 
WHERE 
    T_INBOUND.SID = T_SUPPLIER.ID AND T_INBOUND.GID = T_GOODS.ID AND T_INBOUND.AID = T_ADMIN.ID;

--3.所有入库信息
CREATE OR REPLACE VIEW OUTBOUNDVIEW AS SELECT 
    T_OUTBOUND.ID ID, 
    T_GOODS.NAME NAME, 
    T_OUTBOUND.AMOUNT AMOUNT, 
    T_OUTBOUND.PRICE PRICE, 
    T_CUSTOMER.NAME NAME1, 
    T_CUSTOMER.PHONE PHONE,
    T_CUSTOMER.ADDRESS ADDRESS, 
    T_ADMIN.NAME NAME2，
    T_OUTBOUND.TIME TIME
FROM 
    T_OUTBOUND, 
    T_GOODS, 
    T_CUSTOMER, 
    T_ADMIN 
WHERE 
    T_OUTBOUND.GID = T_GOODS.ID AND T_OUTBOUND.CID = T_CUSTOMER.ID AND T_OUTBOUND.AID = T_ADMIN.ID;


--创建触发器
--入库触发器
create or replace TRIGGER INGOODS 
AFTER INSERT ON T_INBOUND 
FOR EACH ROW 
DECLARE 
  v_total NUMBER(10,2); 
  v_income NUMBER(10,2); 
BEGIN 
  UPDATE T_GOODS SET AMOUNT=AMOUNT+:NEW.AMOUNT WHERE ID=:NEW.GID; 
  v_income := income(:NEW.AMOUNT,(:NEW.PRICE)*(-1)); 
  SELECT TOTAL into v_total FROM (SELECT * from t_money ORDER BY id DESC) where rownum <=1 ; 
  v_total := gettotal(v_income, v_total); 
  INSERT INTO "T_MONEY" (ID, PROFIT, TOTAL, TIME) VALUES (SEQ_T_MONEY.NEXTVAL, v_income, v_total, TO_DATE(sysdate, 'DD-MON-RR')); 
  DBMS_OUTPUT.PUT_LINE('入库触发器：数据已更新！ ');
END;
/

--出库库触发器
create or replace TRIGGER OUTGOODS 
AFTER INSERT ON T_OUTBOUND 
FOR EACH ROW 
DECLARE 
  v_total NUMBER(10,2); 
  v_income NUMBER(10,2); 
BEGIN 
  UPDATE T_GOODS SET AMOUNT=AMOUNT-:NEW.AMOUNT WHERE ID=:NEW.GID; 
  v_income := income(:NEW.AMOUNT,:NEW.PRICE); 
  SELECT TOTAL into v_total FROM (SELECT * from t_money ORDER BY id DESC) where rownum <=1 ; 
  v_total := gettotal(v_income, v_total); 
  INSERT INTO "T_MONEY" (ID, PROFIT, TOTAL, TIME) VALUES (SEQ_T_MONEY.NEXTVAL, v_income, v_total, TO_DATE(sysdate, 'DD-MON-RR')); 
  DBMS_OUTPUT.PUT_LINE('出库触发器：数据已更新！ ');
END;
/

--创建储存过程
--（入库过程）
create or replace
PROCEDURE INBOUND
( SID NUMBER,
  GID NUMBER,
  AID NUMBER,
  AMOUNT NUMBER,
  PRICE NUMBER
) AS
    V_SID NUMBER;
    V_GID NUMBER;
    V_AID NUMBER;
    V_TOTAL NUMBER;
BEGIN
  SELECT ID into V_SID FROM t_supplier WHERE id=SID;
  SELECT ID into V_GID FROM t_goods WHERE id=GID;
  SELECT ID into V_AID FROM t_admin WHERE id=AID;
  SELECT TOTAL INTO V_TOTAL FROM (SELECT * from t_money ORDER BY id DESC) where rownum <=1 ;
  IF AMOUNT<=0 or price<=0  THEN
      DBMS_OUTPUT.PUT_LINE(' AMOUNT或PRICE 输入有错误，请重新输入！');
      RETURN;
  END IF ;
  IF V_TOTAl < INCOME(AMOUNT,PRICE)  THEN
      DBMS_OUTPUT.PUT_LINE(' 资金不足，请重新输入AMOUNT！');
      RETURN;
  END IF ;
  INSERT INTO "T_INBOUND" (ID, SID, GID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_INBOUND.NEXTVAL, SID, GID, AID, AMOUNT, TO_DATE(sysdate, 'DD-MON-RR'), PRICE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE(' SID或GID或AID数据输入有错误，请重新输入！');
END;
/

--（出库过程）
create or replace
PROCEDURE OUTBOUND
( CID NUMBER,
  GID NUMBER,
  AID NUMBER,
  AMOUNT NUMBER,
  PRICE NUMBER
) AS
    V_CID NUMBER;
    V_GID NUMBER;
    V_AID NUMBER;
    V_AMOUNT NUMBER;
BEGIN
  SELECT ID into V_CID FROM t_customer WHERE id=CID;
  SELECT ID into V_GID FROM t_goods WHERE id=GID;
  SELECT ID into V_AID FROM t_admin WHERE id=AID;
  SELECT AMOUNT INTO V_AMOUNT FROM t_goods WHERE ID = gid;
  IF AMOUNT<=0 or price<=0  THEN
      DBMS_OUTPUT.PUT_LINE(' AMOUNT或PRICE 输入有错误，请重新输入！');
      RETURN;
  END IF ;
  IF AMOUNT> v_amount  THEN
      DBMS_OUTPUT.PUT_LINE('库存不足，请重新输入AMOUNT！');
      RETURN;
  END IF ;
  INSERT INTO "T_OUTBOUND" (ID, GID, CID, AID, AMOUNT, TIME, PRICE) VALUES (SEQ_T_OUTBOUND.NEXTVAL, GID,CID, AID, AMOUNT, TO_DATE(sysdate, 'DD-MON-RR'), PRICE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE(' CID或GID或AID数据输入有错误，请重新输入！');
END;
/

--(GOODS信息)
create or replace
PROCEDURE LOWAMOUNT
( V_AMOUNT IN NUMBER DEFAULT 10
) AS
  CURSOR C_EMP IS  SELECT * FROM goodsview WHERE amount <= v_amount;
  C_ROW C_EMP%ROWTYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('所有数量低于' || v_amount || '的GOODS信息如下：');
  DBMS_OUTPUT.PUT_LINE('ID' || '   ' || '货物名称' || '  ' || '货物数量' || '  ' || '货物类型' || '  ' || '仓库名称' || '  ' || '仓库地址');
  FOR C_ROW IN C_EMP LOOP
    DBMS_OUTPUT.PUT_LINE(C_ROW.ID || '    ' || c_row.name || '    ' || c_row.amount || '      ' || c_row.name1 || '    ' || c_row.name2 || '    ' || c_row.address);
  END LOOP;
END;
/

--(登录验证)
create or replace
PROCEDURE LOGIN
( p_name IN VARCHAR2
, p_password IN VARCHAR2
) AS
  v_name VARCHAR2(20);
  v_password VARCHAR2(20);
BEGIN
  SELECT name into v_name FROM t_admin WHERE name = p_name;
  SELECT password into v_password FROM t_admin WHERE name = p_name;
  
  if p_password=v_password THEN
    dbms_output.put_line('登录成功！');
  else 
    dbms_output.put_line('密码错误！请重新输入！');
  END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dbms_output.put_line('帐号不存在！请重新输入！');
END;
/


SET SERVEROUTPUT ON

--CONNECT system/Orcl123456 @orcl